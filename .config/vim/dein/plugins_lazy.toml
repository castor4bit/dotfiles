
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'cohama/vim-smartinput-endwise'
depends = 'vim-smartinput'
on_i = 1
hook_post_source = '''
  call smartinput_endwise#define_default_rules()
'''

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
pre_cmd = 'CtrlP'
hook_add = '''
  nnoremap <silent> ,cp :<C-u>CtrlP<CR>
'''
hook_source = '''
  let g:ctrlp_follow_symlinks = 1
  let g:ctrlp_user_command = {
  \   'types': {
  \     1: ['.git', 'cd %s && git ls-files . -co --exclude-standard'],
  \   },
  \   'fallback': 'find %s -type f'
  \ }
'''

[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = 'scala'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'
hook_source = '''
  let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 'fatih/vim-go'
build = 'rm -Rf /usr/local/opt/macvim-kaoriya/MacVim.app/Contents/Resources/vim/plugins/golang'
on_ft = 'go'
hook_add = '''
  exe "set rtp+=" . globpath($GOPATH, "src/github.com/nsf/gocode/vim")

  let g:go_fmt_command = "goimports"
  let g:go_fmt_autosave = 1
'''

[[plugins]]
repo = 'groenewege/vim-less'
on_ft = 'less'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['html', 'css', 'less']

[[plugins]]
repo = 'kana/vim-smartinput'
on_i = 1
hook_post_source = """
	call smartinput#map_to_trigger('i', '<Plug>(smartinput_BS)', '<BS>', '<BS>')
	call smartinput#map_to_trigger('i', '<Plug>(smartinput_CR)', '<Enter>', '<Enter>')
	call smartinput#map_to_trigger('i', '<Bar>', '<Bar>', '<Bar>')
	call smartinput#define_rule({'at': '\({\|\<do\>\)\s*\%#', 'char': '<Bar>', 'input': '<Bar><Bar><Left>', 'filetype': ['ruby'] })
	call smartinput#define_rule({'at': '\%#|',   'char': '<Bar>', 'input': '<Right>'})
	call smartinput#define_rule({'at': '''''\%#', 'char': '<BS>', 'input': '<BS>'})
	call smartinput#define_rule({'at': '""\%#',   'char': '<BS>', 'input': '<BS>'})
	call smartinput#define_rule({'at': '()\%#',   'char': '<BS>', 'input': '<BS>'})
	call smartinput#define_rule({'at': '\[\%#\]', 'char': '<Enter>', 'input': '<Enter><Enter><Up><Esc>"_S'})
"""

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffee'

[[plugins]]
repo = 'Lokaltog/vim-easymotion'
on_map = '<Plug>'
hook_add = '''
  let g:EasyMotion_do_mapping = 0
  let g:EasyMotion_smartcase = 1

  nmap s <Plug>(easymotion-s2)
  xmap s <Plug>(easymotion-s2)
  omap z <Plug>(easymotion-s2)
  map  <Leader>j <Plug>(easymotion-j)
  map  <Leader>k <Plug>(easymotion-k)
  nmap <Leader>; <Plug>(easymotion-next)
  nmap <Leader>, <Plug>(easymotion-prev)
'''

[[plugins]]
repo = 'majutsushi/tagbar'
pre_cmd = 'Tagbar'
hook_add = '''
  let g:tagbar_autofocus = 1
  let g:tagbar_autoclose = 1
  let g:tagbar_foldlevel = 1
  if has("mac")
    let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
    let g:tagbar_phpctags_bin = '~/.vim/bundle/tagbar-phpctags/bin/phpctags.php'
  endif
  let g:tagbar_type_javascript = {
    \ 'ctagsbin' : '~/.nodebrew/current/bin/jsctags'
  \ }
  nnoremap <silent> ,tt :TagbarToggle<CR>
'''

[[plugins]]
repo = 'marijnh/tern_for_vim'
build = 'npm install'
on_ft = 'javascript'
hook_add = '''
  let g:tern_show_argument_hints = 1
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = 'html'
hook_add = '''
  let g:user_emmet_leader_key = '<C-t>'
'''

# [[plugins]]
# repo = 'marcus/rsense'
# build = "find doc -name '*.ja.txt' -print0 | perl -pe 's/\.txt\0/\0/g' | xargs -0 -I% mv %.txt %x"
# on_ft = 'ruby'
# on_i = 1

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = 'javascript'

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  omap ab <Plug>(textobj-multiblock-a)
  omap ib <Plug>(textobj-multiblock-i)
  vmap ab <Plug>(textobj-multiblock-a)
  vmap ib <Plug>(textobj-multiblock-i)
'''

[[plugins]]
repo = 'othree/html5.vim'
on_ft = 'html'

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'Shougo/neocomplete.vim'
depends = 'context_filetype.vim'
if = 'has("lua")'
on_i = 1
hook_add = '''
  let g:acp_enableAtStartup = 0
  let g:neocomplete#enable_at_startup = 1
  let g:neocomplete#enable_smart_case = 1
  let g:neocomplete#enable_camel_case  = 0
  let g:neocomplete#enable_cursor_hold_i = 1
  let g:neocomplete#enable_fuzzy_completion = 1
  let g:neocomplete#enable_insert_char_pre = 1
  let g:neocomplete#enable_auto_select = 0
  let g:neocomplete#force_overwrite_completefunc = 1
  let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
  let g:neocomplete#skip_auto_completion_time = '0.6'
  let g:neocomplete#sources#syntax#min_keyword_length = 3
  let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      \ 'vimshell' : $HOME.'/.vimshell_hist',
      \ 'scheme' : $HOME.'/.gosh_completions',
      \ 'php' : $HOME.'/.vim/dict/PHP.dict'
      \ }
  if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
  endif
  let g:neocomplete#force_omni_input_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
  let g:neocomplete#force_omni_input_patterns.go = '[^. \t]\.\%(\h\w*\)\?'
  let g:rsenseUseOmniFunc = 1

  augroup vimrc_neocomplete
    autocmd!
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  augroup END

  imap     <silent> <expr><CR>    pumvisible() ? "\<C-y>" : "\<Plug>(smartinput_CR)"
  inoremap <expr><Right> pumvisible() ? "\<C-e>" : "\<Right>"
  inoremap <expr><TAB>   pumvisible() ? "\<C-n>" : "\<TAB>"
  imap     <expr><BS>   neocomplete#smart_close_popup() . "\<Plug>(smartinput_BS)"
  inoremap <expr><C-h>  neocomplete#smart_close_popup() . "\<C-h>"
  inoremap <expr><C-g>  neocomplete#undo_completion()
  inoremap <expr><C-l>  neocomplete#complete_common_string()
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_i = 1
on_ft = 'snippet'
on_unite = ['neosnippet', 'neosnippet/user', 'neosnippet/runtime']
hook_add = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  set completeopt-=preview

  imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)"
    \: pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)"
    \: "\<TAB>"

  if has('conceal')
    set conceallevel=2 concealcursor=i
  endif
'''

[[plugins]]
repo = 'Shougo/unite-outline'
depends = 'unite.vim'
on_cmd = 'Unite'

[[plugins]]
repo = 'Shougo/vimshell.vim'
on_map = '<Plug>'
on_cmd = 'VimShell'

[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'

# [[plugins]]
# repo = 'supermomonga/neocomplete-rsense.vim'
# depends = 'marcus/rsense'
# on_ft = 'ruby'
# on_i = 1

[[plugins]]
repo = 'thinca/vim-themis'
on_ft = 'vim'

[[plugins]]
repo = 'thinca/vim-quickrun'
on_ft = ['php', 'ruby']
hook_add = '''
  let g:quickrun_config = {
  \ '_': {
    \ 'split': '',
    \ 'hook/time/enable': '1',
    \ 'runner': 'vimproc',
    \ 'runner/vimproc/updatetime': 100,
  \}}

  nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
  set splitbelow

  function! s:close_quickrun()
    for winnr in range(1,  winnr('$'))
      if getwinvar(winnr, '&filetype') == 'quickrun'
        execute winnr . 'wincmd w'
        execute winnr . 'wincmd c'
      endif
    endfor
  endfunction

  nnoremap tw :call <SID>close_quickrun()<CR>

  augroup QuickRunCommands
    autocmd!
    " 保存時にquickrunを閉じる
    autocmd BufWritePre * call <SID>close_quickrun()
    " 最後にquickrunのみ残った場合は閉じる
    autocmd WinEnter * if (winnr('$') == 1) && (getbufvar(winbufnr(0), '&filetype') == 'quickrun') | quit | endif
  augroup END
'''

[[plugins]]
repo = 'tyru/caw.vim'
on_map = '<Plug>'
hook_add = '''
  nmap <Leader>c <Plug>(caw:zeropos:toggle)
  vmap <Leader>c <Plug>(caw:zeropos:toggle)
'''

[[plugins]]
repo = 'ujihisa/neco-look'
on_i = 1

[[plugins]]
repo = 'ujihisa/unite-colorscheme'
depends = 'unite.vim'
on_map = '<Plug>'

[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = 'ruby'

[[plugins]]
repo = 'vim-scripts/Colour-Sampler-Pack'

[[plugins]]
repo = 'vim-scripts/sudo.vim'

[[plugins]]
repo = 'vim-scripts/tagbar-phpctags'
depends = 'tagbar'
build = 'curl -s http://vim-php.com/phpctags/install/phpctags.phar -o bin/phpctags.php && chmod +x bin/phpctags.php'
on_ft = 'php'
