
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
pre_cmd = 'CtrlP'
hook_add = '''
  nnoremap <silent> ,cp :<C-u>CtrlP<CR>
'''
hook_source = '''
  let g:ctrlp_follow_symlinks = 1
  let g:ctrlp_user_command = {
  \   'types': {
  \     1: ['.git', 'cd %s && git ls-files . -co --exclude-standard'],
  \   },
  \   'fallback': 'find %s -type f'
  \ }
'''

[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = 'scala'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'
hook_source = '''
  let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 'fatih/vim-go'
build = 'rm -Rf /usr/local/opt/macvim-kaoriya/MacVim.app/Contents/Resources/vim/plugins/golang'
on_ft = 'go'
hook_add = '''
  exe "set rtp+=" . globpath($GOPATH, "src/github.com/nsf/gocode/vim")

  let g:go_fmt_command = "goimports"
  let g:go_fmt_autosave = 1
'''

[[plugins]]
repo = 'groenewege/vim-less'
on_ft = 'less'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['html', 'css', 'less']

[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = 'terraform'

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_if = 1
hook_add = '''
  xmap ga <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffee'

[[plugins]]
repo = 'lighttiger2505/deoplete-vim-lsp'
on_event = ['InsertEnter']

[[plugins]]
repo = 'Lokaltog/vim-easymotion'
on_map = '<Plug>'
hook_add = '''
  let g:EasyMotion_do_mapping = 0
  let g:EasyMotion_smartcase = 1

  nmap s <Plug>(easymotion-s2)
  xmap s <Plug>(easymotion-s2)
  omap z <Plug>(easymotion-s2)
  map  <Leader>j <Plug>(easymotion-j)
  map  <Leader>k <Plug>(easymotion-k)
  nmap <Leader>; <Plug>(easymotion-next)
  nmap <Leader>, <Plug>(easymotion-prev)
'''

[[plugins]]
repo = 'majutsushi/tagbar'
pre_cmd = 'Tagbar'
hook_add = '''
  let g:tagbar_autofocus = 1
  let g:tagbar_autoclose = 1
  let g:tagbar_foldlevel = 1
  if has("mac")
    let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
    let g:tagbar_phpctags_bin = '~/.vim/bundle/tagbar-phpctags/bin/phpctags.php'
  endif
  let g:tagbar_type_javascript = {
    \ 'ctagsbin' : '~/.nodebrew/current/bin/jsctags'
  \ }
  nnoremap <silent> ,tt :TagbarToggle<CR>
'''

[[plugins]]
repo = 'marijnh/tern_for_vim'
build = 'npm install'
on_ft = 'javascript'
hook_add = '''
  let g:tern_show_argument_hints = 1
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = 'html'
hook_add = '''
  let g:user_emmet_leader_key = '<C-t>'
'''

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = 'javascript'

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  omap ab <Plug>(textobj-multiblock-a)
  omap ib <Plug>(textobj-multiblock-i)
  vmap ab <Plug>(textobj-multiblock-a)
  vmap ib <Plug>(textobj-multiblock-i)
'''

[[plugins]]
repo = 'othree/html5.vim'
on_ft = 'html'

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'Shougo/deol.nvim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['context_filetype.vim']
on_event = ['InsertEnter']
hook_add='''
  let g:deoplete#enable_at_startup = 1
'''
hook_post_source = '''
  call deoplete#custom#option({
        \ 'auto_complete_delay': 200,
        \ 'keyword_patterns': {
        \    '_': '[a-zA-Z_]\k*',
        \    'ruby': '[a-zA-Z_]\w*[!?]?',
        \  },
        \ 'smart_case': v:true,
        \ 'sources': {
        \   '_': ['lsp', 'around', 'buffer', 'file', 'member', 'omni']
        \ },
        \ 'yarp': v:true
        \})
  call deoplete#custom#source('_', 'matchers', ['matcher_cpsm'])

  "call deoplete#custom#option('profile', v:true)
  "call deoplete#enable_logging('DEBUG', '/tmp/deoplete.log')

  imap     <silent> <expr><CR>    pumvisible() ? "\<C-y>" :"\<CR>"
  inoremap <expr><Right>  pumvisible() ? "\<C-e>" : "\<Right>"
  inoremap <expr><TAB>    pumvisible() ? "\<C-n>" : "\<TAB>"
  inoremap <expr><C-l>    deoplete#complete_common_string()
  inoremap <expr><C-h>    deoplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS>     deoplete#smart_close_popup()."\<C-h>"
  inoremap <expr><C-g>    deoplete#undo_completion()
'''

[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'

[[plugins]]
repo = 'thinca/vim-themis'
on_ft = 'vim'

[[plugins]]
repo = 'thinca/vim-quickrun'
on_ft = ['php', 'ruby']
hook_add = '''
  let g:quickrun_config = {
  \ '_': {
    \ 'split': '',
    \ 'hook/time/enable': '1',
    \ 'runner': 'vimproc',
    \ 'runner/vimproc/updatetime': 100,
  \}}

  nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
  set splitbelow

  function! s:close_quickrun()
    for winnr in range(1,  winnr('$'))
      if getwinvar(winnr, '&filetype') == 'quickrun'
        execute winnr . 'wincmd w'
        execute winnr . 'wincmd c'
      endif
    endfor
  endfunction

  nnoremap tw :call <SID>close_quickrun()<CR>

  augroup QuickRunCommands
    autocmd!
    " 保存時にquickrunを閉じる
    autocmd BufWritePre * call <SID>close_quickrun()
    " 最後にquickrunのみ残った場合は閉じる
    autocmd WinEnter * if (winnr('$') == 1) && (getbufvar(winbufnr(0), '&filetype') == 'quickrun') | quit | endif
  augroup END
'''

[[plugins]]
repo = 'tyru/caw.vim'
on_map = '<Plug>'
hook_add = '''
  nmap <Leader>c <Plug>(caw:zeropos:toggle)
  vmap <Leader>c <Plug>(caw:zeropos:toggle)
'''

[[plugins]]
repo = 'ujihisa/neco-look'
on_i = 1

[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = 'ruby'

[[plugins]]
repo = 'vim-scripts/Colour-Sampler-Pack'

[[plugins]]
repo = 'vim-scripts/sudo.vim'

[[plugins]]
repo = 'vim-scripts/tagbar-phpctags'
depends = 'tagbar'
build = 'curl -s http://vim-php.com/phpctags/install/phpctags.phar -o bin/phpctags.php && chmod +x bin/phpctags.php'
on_ft = 'php'
