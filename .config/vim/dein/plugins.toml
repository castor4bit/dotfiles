
[[plugins]]
repo = 'castor4bit/inside-motion.vim'

[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
let g:lexima_accept_pum_with_enter = 1
'''

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
  let g:ale_fix_on_save = 0
  let g:ale_fixers = {
        \ 'javascript': ['prettier'],
        \ 'ruby': ['rubocop'],
        \}
  let g:ale_linters = {
        \ 'javascript': ['eslint'],
        \ 'ruby': ['rubocop'],
        \ 'css': ['stylelint'],
        \}
  let g:ale_lint_on_text_changed = 'never'
  let g:ale_lint_on_insert_leave = 0
  let g:ale_lint_on_enter = 0

  let g:ale_pattern_options_enabled = 1
  let g:ale_pattern_options = {
        \ '\.min\.js$': {'ale_linters': [], 'ale_fixers': []},
        \ '\.min\.css$': {'ale_linters': [], 'ale_fixers': []},
        \}
'''

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'

[[plugins]]
repo = 'haya14busa/incsearch.vim'
hook_add = '''
  let g:incsearch#auto_nohlsearch = 0

  map /  <Plug>(incsearch-forward)
  map ?  <Plug>(incsearch-backward)
  map g/ <Plug>(incsearch-stay)
  map n  <Plug>(incsearch-nohl-n)
  map N  <Plug>(incsearch-nohl-N)
  map *  <Plug>(incsearch-nohl-*)
  map #  <Plug>(incsearch-nohl-#)
  map g* <Plug>(incsearch-nohl-g*)
  map g# <Plug>(incsearch-nohl-g#)
'''

[[plugins]]
repo = 'kana/vim-tabpagecd'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'mattn/sonictemplate-vim'
hook_add = '''
  let g:sonictemplate_key = "\<Plug>(sonictemplate-select)"
  let g:sonictemplate_intelligent_key = "\<Plug>(sonictemplate-select-intelligent)"
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
depends = ['vim-lsp']
merged = 0
hook_add = '''
  let g:lsp_settings = {
      \  'typeprof': {'disabled': v:true}
      \}
'''

[[plugins]]
repo = 'nixprime/cpsm'
build = 'sh -c "PY3=ON ./install.sh"'

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  let g:anzu_enable_CursorHold_AnzuUpdateSearchStatus = 1
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
depends = ['async.vim']
hook_add = '''
  let g:lsp_fold_enabled = 0
  let g:lsp_diagnostics_enabled = 0
  "let g:lsp_log_verbose = 1
  "let g:lsp_log_file = expand('/tmp/vim-lsp.log')

  highlight clear LspWarningHighlight
'''

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
  let g:NERDSpaceDelims = 1
  let g:NERDShutUp = 1
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['nvim-yarp', 'vim-hug-neovim-rpc', 'neomru.vim']
hook_add = '''
  " Define mappings
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d    denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p    denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q    denite#do_map('quit')
    nnoremap <silent><buffer><expr> i    denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
    nnoremap <silent><buffer><expr> <ESC><ESC> denite#do_map('quit')
  endfunction

  autocmd FileType denite-filter call s:denite_filter_my_settings()
  function! s:denite_filter_my_settings() abort
    imap <silent><buffer> <CR> <Plug>(denite_filter_quit)
  endfunction

  " Options
  call denite#custom#option('_', 'direction', 'topleft')
  call denite#custom#option('_', 'start_filter', v:true)

  " Change ignore_globs
  let s:ignore_globs = [
        \ '.git', '.svn',
        \ 'images/', 'img/', 'fonts/',
        \]
  call denite#custom#filter('matcher/ignore_globs', 'ignore_globs', s:ignore_globs)

  " Change file/rec command.
  let s:ag_ignore_options = map(deepcopy(s:ignore_globs), { k, v -> '--ignore=' . v })
  let s:ag_options = ['ag', '--follow'] + s:ag_ignore_options + ['--nocolor', '--nogroup', '-g', '']
  call denite#custom#var('file/rec', 'command', s:ag_options)

  " Change matchers.
  call denite#custom#source('file_mru', 'matchers', ['matcher/cpsm'])
  call denite#custom#source('file/rec', 'matchers', ['matcher/cpsm'])

  " Change sorters.
  call denite#custom#source('file/rec', 'sorters', ['sorter/sublime'])

  " Change default action.
  call denite#custom#kind('file', 'default_action', 'open')

  " Ag command on grep source
  call denite#custom#var('grep', 'command', ['ag'])
  call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'final_opts', [])

  " Define alias
  call denite#custom#alias('source', 'file/rec/git', 'file/rec')
  call denite#custom#var('file/rec/git', 'command', ['git', 'ls-files', '-co', '--exclude-standard'])

  call denite#custom#alias('source', 'file/rec/py', 'file/rec')
  call denite#custom#var('file/rec/py', 'command', ['scantree.py', '--path', ':directory'])

  " grep
  command! -nargs=? Dgrep call s:Dgrep(<f-args>)
  function s:Dgrep(...)
    if a:0 > 0
      execute(':Denite -buffer-name=grep-buffer-denite grep -path='.a:1)
    else
      execute(':Denite -buffer-name=grep-buffer-denite grep')
    endif
  endfunction

  command! Dresume execute(':Denite -resume -buffer-name=grep-buffer-denite')
  command! Dnext   execute(':Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=+1 -immediately')
  command! Dprev   execute(':Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=-1 -immediately')

  " Others
  call denite#custom#source('grep', 'max_candidates', 200)

  nnoremap <silent> ,gr :<C-u>Denite -buffer-name=grep-buffer-denite grep<CR>
  nnoremap <silent> ,uu :<C-u>Denite buffer file_mru<CR>
  nnoremap <silent> ,uf :<C-u>DeniteBufferDir file<CR>
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['nvim-yarp', 'vim-hug-neovim-rpc']
hook_add = '''
  nnoremap <silent> ,vf :<C-u>Defx -split=vertical -winwidth=30 -direction=topleft `expand('%:p:h')` -search=`expand('%:p')`<CR>

  call defx#custom#option('_', { 'show_ignored_files': 1 })

  autocmd FileType defx call s:defx_my_settings()
  function! s:defx_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
          \ defx#is_directory() ?
          \ defx#do_action('open_directory') :
          \ defx#do_action('multi', ['drop', 'quit'])
    nnoremap <silent><buffer><expr> l
          \ defx#is_directory() ?
          \ defx#do_action('open_directory') :
          \ defx#do_action('multi', ['drop', 'quit'])

    nnoremap <silent><buffer><expr> c   defx#do_action('copy')
    nnoremap <silent><buffer><expr> m   defx#do_action('move')
    nnoremap <silent><buffer><expr> p   defx#do_action('paste')
    nnoremap <silent><buffer><expr> N   defx#do_action('new_file')
    nnoremap <silent><buffer><expr> K   defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> d   defx#do_action('remove')
    nnoremap <silent><buffer><expr> r   defx#do_action('rename')

    nnoremap <silent><buffer><expr> t   defx#do_action('open_or_close_tree')
    nnoremap <silent><buffer><expr> .   defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> *   defx#do_action('toggle_select_all')

    nnoremap <silent><buffer><expr> h   defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> j   line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k   line('.') == 1 ? 'G' : 'k'

    nnoremap <silent><buffer><expr> <Esc> defx#do_action('quit')
    nnoremap <silent><buffer><expr> q     defx#do_action('quit')
  endfunction
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if has('win32')
    let cmd = 'tools\\update-dll-mingw'
  elseif has('win32unix')
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'terryma/vim-expand-region'

[[plugins]]
repo = 'thinca/vim-ref'
hook_add = '''
  let g:ref_use_vimproc = 1
  let g:ref_phpmanual_path = $HOME ."/Documents/refs/php-chunked-xhtml"
  let g:ref_source_webdict_sites = {
        \   'alc': {
        \     'url': 'http://eow.alc.co.jp/search?q=%s',
        \   },
        \   'wikipedia': {
        \     'url': 'http://ja.wikipedia.org/wiki/%s',
        \   },
        \ }
  function! g:ref_source_webdict_sites.alc.filter(output)
    return join(split(a:output, "\n")[42 :], "\n")
  endfunction
  function! g:ref_source_webdict_sites.wikipedia.filter(output)
    return join(split(a:output, "\n")[17 :], "\n")
  endfunction
  nnoremap ,rr :<C-u>Ref refe<Space>
  nnoremap ,rp :<C-u>Ref phpmanual<Space>
  nnoremap ,ra :<C-u>Ref webdict alc<Space>
  nnoremap ,rw :<C-u>Ref webdict wikipedia<Space>
  augroup vimrc_refvim
    autocmd!
    autocmd FileType ref nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
  augroup END
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'vim-scripts/buftabs'
hook_add = '''
  let g:buftabs_only_basename = 1
  let g:buftabs_in_statusline = 1
  let g:buftabs_active_highlight_group = "Visual"

  nnoremap <Space>   :bnext<CR>
  nnoremap <S-Space> :bprev<CR>
'''

[[plugins]]
repo = 'vim-scripts/wombat256.vim'
hook_add = '''
  set t_Co=256
  autocmd MyAutoCmd VimEnter * colorscheme wombat256mod
  autocmd MyAutoCmd VimEnter,ColorScheme * hi CursorLine ctermbg=239 ctermfg=NONE cterm=NONE
  autocmd MyAutoCmd VimEnter,ColorScheme * hi CursorLine guibg=#555555 guifg=NONE gui=NONE
  autocmd MyAutoCmd VimEnter,ColorScheme * hi MatchParen ctermbg=NONE
  autocmd MyAutoCmd VimEnter,ColorScheme * hi ModeMsg    ctermfg=111
'''

[[plugins]]
repo = 'vim-scripts/yanktmp.vim'
hook_add = '''
  map <silent> sy :call YanktmpYank()<CR>
  map <silent> sp :call YanktmpPaste_p()<CR>
  map <silent> sP :call YanktmpPaste_P()<CR>
'''
