
[[plugins]]
repo = 'castor4bit/inside-motion.vim'

[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
let g:lexima_accept_pum_with_enter = 1
'''

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
  let g:ale_fix_on_save = 1
  let g:ale_fixers = {
        \ 'javascript': ['prettier'],
        \ 'typescript': ['prettier'],
        \ 'typescriptreact': ['prettier'],
        \ 'ruby': ['rubocop'],
        \ 'php': ['php_cs_fixer'],
        \}
  let g:ale_linters = {
        \ 'javascript': ['eslint'],
        \ 'ruby': ['rubocop'],
        \ 'css': ['stylelint'],
        \ 'php': ['php'],
        \}
  let g:ale_linters_explicit = 1
  let g:ale_lint_on_text_changed = 'never'
  let g:ale_lint_on_insert_leave = 0
  let g:ale_lint_on_enter = 0
  let g:ale_lint_on_save = 1

  let g:ale_ruby_rubocop_executable = 'bundle'

  let g:ale_pattern_options_enabled = 1
  let g:ale_pattern_options = {
        \ '\.min\.js$': {'ale_linters': [], 'ale_fixers': []},
        \ '\.min\.css$': {'ale_linters': [], 'ale_fixers': []},
        \ 'Schemafile': {'ale_linters': [], 'ale_fixers': []},
        \}

  let g:php_cs_fixer_options = '--rules=@PSR2'
'''

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'

[[plugins]]
repo = 'hashivim/vim-terraform'

[[plugins]]
repo = 'haya14busa/incsearch.vim'
hook_add = '''
  let g:incsearch#auto_nohlsearch = 0

  map /  <Plug>(incsearch-forward)
  map ?  <Plug>(incsearch-backward)
  map g/ <Plug>(incsearch-stay)
  map n  <Plug>(incsearch-nohl-n)
  map N  <Plug>(incsearch-nohl-N)
  map *  <Plug>(incsearch-nohl-*)
  map #  <Plug>(incsearch-nohl-#)
  map g* <Plug>(incsearch-nohl-g*)
  map g# <Plug>(incsearch-nohl-g#)
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip'

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'kana/vim-tabpagecd'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kuuote/ddu-source-mr'

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
  let g:fern#default_hidden = 1
  let g:fern#default_exclude = '^\%(\..\+swp\)$'

  nnoremap <silent> ,vp <Cmd>Fern . -drawer<CR>
  nnoremap <silent> ,vf <Cmd>Fern . -drawer -reveal=%<CR>
  nnoremap <Plug>(fern-close-drawer) :<C-u>FernDo close -drawer -stay<CR>

  function! s:init_fern() abort
    nmap <buffer> <Esc><Esc>  <Cmd>q<CR>
    nmap <buffer><silent> <Plug>(fern-myaction-open-and-close)
          \ <Plug>(fern-action-open)<Plug>(fern-close-drawer)

    nmap <buffer><expr>
          \ <Plug>(fern-myaction-open-or-expand)
          \ fern#smart#leaf(
          \   "\<Plug>(fern-myaction-open-and-close)",
          \   "\<Plug>(fern-action-expand)",
          \ )
    nmap <buffer> l <Plug>(fern-myaction-open-or-expand)
  endfunction

  augroup fern-custom
    autocmd! *
    autocmd FileType fern call s:init_fern()
  augroup END
'''

[[plugins]]
repo = 'lambdalisue/mr.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'

[[plugins]]
repo = 'matsui54/denops-signature_help'
hook_add = '''
  let g:lsp_signature_help_enabled = 0
'''

[[plugins]]
repo = 'mattn/sonictemplate-vim'
hook_add = '''
  let g:sonictemplate_key = "\<Plug>(sonictemplate-select)"
  let g:sonictemplate_intelligent_key = "\<Plug>(sonictemplate-select-intelligent)"
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
depends = ['vim-lsp']
merged = 0
hook_add = '''
  let g:lsp_settings = {
      \  'typeprof': {'disabled': v:true}
      \}
'''

[[plugins]]
repo = 'nixprime/cpsm'
build = 'sh -c "PY3=ON ./install.sh"'

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  let g:anzu_enable_CursorHold_AnzuUpdateSearchStatus = 1
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
depends = ['async.vim']
hook_add = '''
  let g:lsp_fold_enabled = 0
  let g:lsp_diagnostics_enabled = 0
  "let g:lsp_log_verbose = 1
  "let g:lsp_log_file = expand('/tmp/vim-lsp.log')

  highlight clear LspWarningHighlight
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
  let g:NERDSpaceDelims = 1
  let g:NERDShutUp = 1
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim']
hook_add = '''
  call ddc#custom#patch_global('ui', 'native')
  call ddc#custom#patch_global('sources', ['around', 'vim-lsp', 'file'])
  call ddc#custom#patch_global('sourceOptions', {
        \ '_': {
        \   'matchers': ['matcher_head'],
        \   'sorters': ['sorter_rank'],
        \   'converters': ['converter_remove_overlap'],
        \ },
        \ 'around': {'mark': 'A'},
        \ 'vim-lsp': {
        \   'matchers': ['matcher_head', 'matcher_length'],
        \   'mark': 'lsp',
        \   'forceCompletionPattern': '\.\w*|:\w*|->\w*',
        \ },
        \ 'file': {
        \   'mark': 'file',
        \   'isVolatile': v:true,
        \   'forceCompletionPattern': '\S/\S*',
        \ },
        \ })
  call ddc#custom#patch_global('sourceParams', {
        \ 'around': {'maxSize': 500},
        \ 'nvim-lsp': {'maxSize': 500, 'kindLabels': { 'Class': 'c' } },
        \ })
  call ddc#custom#patch_global('autoCompleteEvents',
        \ ['InsertEnter', 'TextChangedI', 'TextChangedP'])

  call ddc#enable()
  call popup_preview#enable()
  call signature_help#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-around'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'

[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddu.vim'
hook_add = '''
  call ddu#custom#patch_global({
        \   'ui': 'ff',
        \   'sources': [
        \     {
        \       'name':'mr',
        \     },
        \     {
        \       'name':'file_rec',
        \       'params': {
        \         'ignoredDirectories': ['.git', 'node_modules', 'vendor', '.next']
        \       }
        \     },
        \   ],
        \   'sourceOptions': {
        \     '_': {
        \       'matchers': ['matcher_fzf'],
        \     },
        \   },
        \   'kindOptions': {
        \     'file': {
        \       'defaultAction': 'open',
        \     },
        \   },
        \   'filterParams': {
        \     'matcher_substring': {
        \       'highlightMatched': 'Title',
        \     },
        \     'matcher_fzf': {
        \       'highlightMatched': 'Search',
        \     },
        \   },
        \   'uiParams': {
        \     'ff': {
        \       'startFilter': v:true,
        \       'prompt': '> ',
        \     },
        \     'filer': {
        \       'split': 'vertical',
        \       'splitDirection': 'topleft',
        \     },
        \   },
        \ })

  call ddu#custom#patch_local('grep', {
        \   'sourceParams' : {
        \     'rg' : {
        \       'args': ['--column', '--no-heading', '--color', 'never'],
        \     },
        \   },
        \   'uiParams': {
        \     'ff': {
        \       'startFilter': v:false,
        \     }
        \   },
        \ })

  autocmd FileType ddu-ff call s:ddu_my_settings()
  function! s:ddu_my_settings() abort
    nnoremap <buffer><silent> <CR>      <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
    nnoremap <buffer><silent> <Space>   <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
    nnoremap <buffer><silent> i         <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
    nnoremap <buffer><silent> <Esc>     <Cmd>call ddu#ui#ff#do_action('quit')<CR>
    nnoremap <buffer><silent> q         <Cmd>call ddu#ui#ff#do_action('quit')<CR>
  endfunction

  autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
  function! s:ddu_filter_my_settings() abort
    inoremap <buffer><silent> <CR>  <Esc><Cmd>close<CR>
    nnoremap <buffer><silent> <CR>  <Cmd>close<CR>
    nnoremap <buffer><silent> q     <Cmd>close<CR>
  endfunction

  autocmd FileType ddu-filer call s:ddu_filer_my_settings()
  function! s:ddu_filer_my_settings() abort
    nnoremap <buffer><expr> l ddu#ui#filer#is_directory() ?
          \ "<Cmd>call ddu#ui#filer#do_action('expandItem')<CR>" :
          \ "<Cmd>call ddu#ui#filer#do_action('itemAction')<CR>"
    nnoremap <buffer><expr> h ddu#ui#filer#is_directory() ?
          \ "<Cmd>call ddu#ui#filer#do_action('collapseItem')<CR>" : "h"
    nnoremap <buffer><silent> <Esc><Esc>   <Cmd>call ddu#ui#filer#do_action('quit')<CR>
  endfunction

  nnoremap <silent> ,uf <Cmd>call ddu#start({})<CR>
  nnoremap <silent> ,uu <Cmd>call ddu#start({'name': 'mr'})<CR>
  nnoremap <silent> ,gr <Cmd>call ddu#start({
        \   'volatile': v:true,
        \   'sources': [{
        \     'name': 'rg',
        \     'options': {'matchers': []},
        \   }],
        \   'uiParams': {'ff': {
        \     'ignoreEmpty': v:false,
        \     'autoResize': v:false,
        \   }},
        \ })<CR>
  nnoremap <silent> ,ggr <Cmd>call ddu#start({
        \ 'name': 'grep',
        \ 'sources': [
        \   { 'name': 'rg', 'params': { 'input': expand('<cword>') } }
        \ ]})<CR>
"   nnoremap <silent> ,vp <Cmd>call ddu#start({
"        \ 'ui':'filer',
"        \ 'sources': [
"        \   { 'name': 'file', 'params': {} }
"        \ ]})<CR>
"   nnoremap <silent> ,vf <Cmd>call ddu#start({
"        \ 'ui':'filer',
"        \ 'sources': [
"        \   { 'name': 'file', 'options': { 'path': expand('%:p:h') } }
"        \ ]})<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'

[[plugins]]
repo = 'Shougo/ddu-kind-file'

[[plugins]]
repo = 'Shougo/ddu-source-file'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'

[[plugins]]
repo = 'Shougo/ddu-source-register'

[[plugins]]
repo = 'Shougo/ddu-ui-ff'

[[plugins]]
repo = 'Shougo/ddu-ui-filer'

[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
  let g:dein#auto_recache = v:false
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if has('win32')
    let cmd = 'tools\\update-dll-mingw'
  elseif has('win32unix')
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'shun/ddc-vim-lsp'
on_source = 'Shougo/ddc.vim'

[[plugins]]
repo = 'shun/ddu-source-buffer'

[[plugins]]
repo = 'shun/ddu-source-rg'

[[plugins]]
repo = 'terryma/vim-expand-region'

[[plugins]]
repo = 'thinca/vim-ref'
hook_add = '''
  let g:ref_use_vimproc = 1
  let g:ref_phpmanual_path = $HOME ."/Documents/refs/php-chunked-xhtml"
  let g:ref_source_webdict_sites = {
        \   'alc': {
        \     'url': 'http://eow.alc.co.jp/search?q=%s',
        \   },
        \   'wikipedia': {
        \     'url': 'http://ja.wikipedia.org/wiki/%s',
        \   },
        \ }
  function! g:ref_source_webdict_sites.alc.filter(output)
    return join(split(a:output, "\n")[42 :], "\n")
  endfunction
  function! g:ref_source_webdict_sites.wikipedia.filter(output)
    return join(split(a:output, "\n")[17 :], "\n")
  endfunction
  nnoremap ,rr :<C-u>Ref refe<Space>
  nnoremap ,rp :<C-u>Ref phpmanual<Space>
  nnoremap ,ra :<C-u>Ref webdict alc<Space>
  nnoremap ,rw :<C-u>Ref webdict wikipedia<Space>
  augroup vimrc_refvim
    autocmd!
    autocmd FileType ref nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
  augroup END
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'vim-denops/denops.vim'
hook_add = '''
  "let g:denops#trace = 1
'''

[[plugins]]
repo = 'vim-scripts/buftabs'
hook_add = '''
  let g:buftabs_only_basename = 1
  let g:buftabs_in_statusline = 1
  let g:buftabs_active_highlight_group = "Visual"

  nnoremap <Space>   :bnext<CR>
  nnoremap <S-Space> :bprev<CR>
'''

[[plugins]]
repo = 'vim-scripts/wombat256.vim'
hook_add = '''
  set t_Co=256
  colorscheme wombat256mod

  augroup wmbt
    autocmd!
    autocmd VimEnter,ColorScheme * hi CursorLine ctermbg=239 ctermfg=NONE cterm=NONE
    autocmd VimEnter,ColorScheme * hi CursorLine guibg=#555555 guifg=NONE gui=NONE
    autocmd VimEnter,ColorScheme * hi MatchParen ctermbg=NONE
    autocmd VimEnter,ColorScheme * hi ModeMsg    ctermfg=111

    autocmd VimEnter,ColorScheme * hi Normal      ctermbg=NONE
    autocmd VimEnter,ColorScheme * hi LineNr      ctermbg=NONE
    autocmd VimEnter,ColorScheme * hi SignColumn  ctermbg=NONE
    autocmd VimEnter,ColorScheme * hi VertSplit   ctermbg=NONE
    autocmd VimEnter,ColorScheme * hi NonText     ctermbg=NONE
  augroup END
'''

[[plugins]]
repo = 'vim-scripts/yanktmp.vim'
hook_add = '''
  map <silent> sy :call YanktmpYank()<CR>
  map <silent> sp :call YanktmpPaste_p()<CR>
  map <silent> sP :call YanktmpPaste_P()<CR>
'''

[[plugins]]
repo = 'yuki-yano/ddu-filter-fzf'
